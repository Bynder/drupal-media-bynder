<?php

/**
 * @file
 * A block module that displays recent blog and forum posts.
 */

/**
 * load configuration settings
 */
include_once dirname(__FILE__) . '/includes/media_bynder.utils.inc';

// Hooks and callbacks for integrating with File Entity module for display.
require_once dirname(__FILE__) . '/includes/media_bynder.formatters.inc';

require_once dirname(__FILE__) . '/includes/media_bynder.admin.inc';

/**
 * Implements hook_stream_wrappers().
 */
function media_bynder_stream_wrappers() {
    return array(
        'bynder' => array(
            'name' => t('Bynder media'),
            'class' => 'MediaBynderStreamWrapper',
            'description' => t('Media provided by Bynder.'),
            'type' => STREAM_WRAPPERS_READ_VISIBLE | STREAM_WRAPPERS_WRITE_VISIBLE
        )
    );
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function media_bynder_media_browser_plugin_info() {
  $info['media_bynder'] = array(
    'title' => t('Bynder'),
    'class' => 'MediaBynderBrowser'
  );

  return $info;
}


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 */
function media_bynder_help($path, $arg) {
    switch ($path) {
        case "admin/advanced_help#media_bynder":
            return '<p>' . t("Advanced Help: Displays links to nodes created on this date") . '</p>';

        case "admin/help#media_bynder":
            return '<p>' . t("Help: Displays links to nodes created on this date") . '</p>';
    }
}

/**
 * Implements hook_permission().
 */
function media_bynder_permission() {
  return array(
    'administer media bynder' => array(
      'title' => t('Administer Media: Bynder'),
      'description' => t('Configure Bynder API connection settings.'),
    ),
  );
}

/**
 * Implements hook menu().
 */
function media_bynder_menu() {
    $items = array();
    $items['admin/config/media/media_bynder'] = array(
        'title' => 'Bynder Settings',
        'description' => 'Configuration for media bynder module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'media_bynder_form'
        ),
        'access arguments' => array(
            'administer media bynder'
        ),
        'file' => 'includes/media_bynder.admin.inc',
        'type' => MENU_NORMAL_ITEM
    );
    $items['media_bynder'] = array(
        'title' => 'Media',
        'page callback' => '_media_bynder_page',
        'access arguments' => array(
            'access media_bynder content'
        ),
        // Will appear in Navigation menu.
        'type' => MENU_NORMAL_ITEM
    );
    $items['media/add/media_bynder'] = array(
        'title' => 'Add media from Bynder',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'media_bynder_add'
        ),
        'access arguments' => array(
            'administer site configuration'
        ),
        'type' => MENU_LOCAL_ACTION,
        'file' => 'includes/media_bynder.admin.inc',
        'weight' => -1
    );

    $items['admin/content/media/add/media_bynder'] = $items['media/add/media_bynder'];

    return $items;
}

/**
 * Implements hook_library().
 */
function media_bynder_library() {
  $path = drupal_get_path('module', 'media_bynder');
  $info = system_get_info('module', 'media_bynder');

  $common = array(
    'website' => 'http://www.getbynder.com',
    'version' => !empty($info['version']) ? $info['version'] : '7.x-1.x',
  );

  // Powers the 'Add media from Bynder' page.
  $libraries['media_bynder_administration'] = array(
    'title' => 'Media: Bynder Administration',
    'js' => array(
      $path . '/js/media_bynder.js' => array(
        'group' => JS_LIBRARY,
        'weight' => -5,
      ),
    ),
    'css' => array(
      $path . '/media_bynder.css' => array(),
    ),
    'dependencies' => array(
      array('media_bynder', 'spin'),
    ),
  );

  // Generates animated CSS3 loading spinners.
  $libraries['spin'] = array(
    'title' => 'Spin',
    'js' => array(
      $path . '/js/spin.min.js' => array(
        'group' => JS_DEFAULT,
      ),
    ),
  );

  // Add common information to each library.
  foreach ($libraries as &$library) {
    $library += $common;
  }

  return $libraries;
}

/**
 * Before saving the file.
 *
 * @param unknown $file
 *   the file
 */
function media_bynder_file_presave($file) {
    if (stristr($file->uri, 'bynder://')) {
        if (($file->type) == 'image') {
            $file->filemime = 'image/bynder';
        } elseif (($file->type) == 'video') {
            $file->filemime = 'video/bynder';
        }
    }
}

function media_bynder_entity_info_alter(&$entity_info) {
  $current_media = variable_get('current_media');
  $custom_view_modes = $current_media['thumbnails'];
  $entity_info['file']['view modes'] = array();

  foreach ($custom_view_modes as $custom_view_key => $custom_view_mode_url) {
    $entity_info['file']['view modes'] += array($custom_view_key => array('label' => t($custom_view_key), 'custom settings' => true, ), );
  }
}